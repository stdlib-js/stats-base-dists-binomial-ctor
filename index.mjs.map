{"version":3,"file":"index.mjs","sources":["../lib/ctor.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isProbability = require( '@stdlib/assert-is-probability' ).isPrimitive;\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar kurtosis = require( '@stdlib/stats-base-dists-binomial-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-binomial-mean' );\nvar median = require( '@stdlib/stats-base-dists-binomial-median' );\nvar mode = require( '@stdlib/stats-base-dists-binomial-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-binomial-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-binomial-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-binomial-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-binomial-cdf' );\nvar logpmf = require( '@stdlib/stats-base-dists-binomial-logpmf' );\nvar mgf = require( '@stdlib/stats-base-dists-binomial-mgf' );\nvar pmf = require( '@stdlib/stats-base-dists-binomial-pmf' );\nvar quantile = require( '@stdlib/stats-base-dists-binomial-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction binomialCDF( x ) {\n\treturn cdf( x, this.n, this.p );\n}\n\n/**\n* Evaluates the natural logarithm of the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n*/\nfunction binomialLogPMF( x ) {\n\treturn logpmf( x, this.n, this.p );\n}\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @private\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n*/\nfunction binomialMGF( t ) {\n\treturn mgf( t, this.n, this.p );\n}\n\n/**\n* Evaluates the probability mass function (PMF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n*/\nfunction binomialPMF( x ) {\n\treturn pmf( x, this.n, this.p );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction binomialQuantile( p ) {\n\treturn quantile( p, this.n, this.p );\n}\n\n\n// MAIN //\n\n/**\n* Binomial distribution constructor.\n*\n* @constructor\n* @param {PositiveInteger} [n=1] - number of trials\n* @param {Probability} [p=0.5] - success probability\n* @throws {TypeError} `n` must be a positive integer\n* @throws {TypeError} `p` must be a number between 0 and 1\n* @returns {Binomial} distribution instance\n*\n* @example\n* var binomial = new Binomial( 5, 0.1 );\n*\n* var y = binomial.cdf( 0.8 );\n* // returns ~0.59\n*\n* var v = binomial.mode;\n* // returns 0.0\n*/\nfunction Binomial() {\n\tvar n;\n\tvar p;\n\tif ( !(this instanceof Binomial) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new Binomial();\n\t\t}\n\t\treturn new Binomial( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\tn = arguments[ 0 ];\n\t\tp = arguments[ 1 ];\n\t\tif ( !isPositiveInteger( n ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Number of trials `n` must be a positive integer. Value: `%s`.', n ) );\n\t\t}\n\t\tif ( !isProbability( p ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Success probability `p` must be a number between 0 and 1. Value: `%s`.', p ) );\n\t\t}\n\t} else {\n\t\tn = 1;\n\t\tp = 0.5;\n\t}\n\tdefineProperty( this, 'n', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn n;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositiveInteger( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a positive integer. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tn = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'p', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn p;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isProbability( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid value. Must be a number between 0 and 1. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\tp = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* Binomial distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof Binomial.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.kurtosis;\n* // returns ~-0.153\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.n, this.p );\n});\n\n/**\n* Binomial distribution expected value.\n*\n* @name mean\n* @memberof Binomial.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.mean;\n* // returns ~4.8\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'mean', function get() {\n\treturn mean( this.n, this.p );\n});\n\n/**\n* Binomial distribution median.\n*\n* @name median\n* @memberof Binomial.prototype\n* @type {number}\n* @see [median]{@link https://en.wikipedia.org/wiki/Median}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.median;\n* // returns 5.0\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'median', function get() {\n\treturn median( this.n, this.p );\n});\n\n/**\n* Binomial distribution mode.\n*\n* @name mode\n* @memberof Binomial.prototype\n* @type {NonNegativeInteger}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.mode;\n* // returns 5.0\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'mode', function get() {\n\treturn mode( this.n, this.p );\n});\n\n/**\n* Binomial distribution skewness.\n*\n* @name skewness\n* @memberof Binomial.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.skewness;\n* // returns ~0.118\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'skewness', function get() {\n\treturn skewness( this.n, this.p );\n});\n\n/**\n* Binomial distribution standard deviation.\n*\n* @name stdev\n* @memberof Binomial.prototype\n* @type {number}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.stdev;\n* // returns ~1.697\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'stdev', function get() {\n\treturn stdev( this.n, this.p );\n});\n\n/**\n* Binomial distribution variance.\n*\n* @name variance\n* @memberof Binomial.prototype\n* @type {number}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var binomial = new Binomial( 12, 0.4 );\n*\n* var v = binomial.variance;\n* // returns ~2.88\n*/\nsetReadOnlyAccessor( Binomial.prototype, 'variance', function get() {\n\treturn variance( this.n, this.p );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof Binomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var binomial = new Binomial( 4, 0.2 );\n*\n* var v = binomial.cdf( 0.5 );\n* // returns ~0.41\n*/\nsetReadOnly( Binomial.prototype, 'cdf', binomialCDF );\n\n/**\n* Evaluates the natural logarithm of the probability density function (PMF).\n*\n* @name logpmf\n* @memberof Binomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated logPMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var binomial = new Binomial( 4, 0.2 );\n*\n* var v = binomial.logpmf( 2.0 );\n* // returns ~-1.873\n*/\nsetReadOnly( Binomial.prototype, 'logpmf', binomialLogPMF );\n\n/**\n* Evaluates the moment-generating function (MGF).\n*\n* @name mgf\n* @memberof Binomial.prototype\n* @type {Function}\n* @param {number} t - input value\n* @returns {number} evaluated MGF\n* @see [mgf]{@link https://en.wikipedia.org/wiki/Moment-generating_function}\n*\n* @example\n* var binomial = new Binomial( 4, 0.2 );\n*\n* var v = binomial.mgf( 0.5 );\n* // returns ~1.629\n*/\nsetReadOnly( Binomial.prototype, 'mgf', binomialMGF );\n\n/**\n* Evaluates the probability density function (PMF).\n*\n* @name pmf\n* @memberof Binomial.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PMF\n* @see [pmf]{@link https://en.wikipedia.org/wiki/Probability_mass_function}\n*\n* @example\n* var binomial = new Binomial( 4, 0.2 );\n*\n* var v = binomial.pmf( 2.0 );\n* // returns ~0.154\n*/\nsetReadOnly( Binomial.prototype, 'pmf', binomialPMF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof Binomial.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var binomial = new Binomial( 4, 0.2 );\n*\n* var v = binomial.quantile( 0.5 );\n* // returns 1.0\n*/\nsetReadOnly( Binomial.prototype, 'quantile', binomialQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = Binomial;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Binomial distribution constructor.\n*\n* @module @stdlib/stats-base-dists-binomial-ctor\n*\n* @example\n* var Binomial = require( '@stdlib/stats-base-dists-binomial-ctor' );\n*\n* var binomial = new Binomial( 8, 0.2 );\n*\n* var y = binomial.cdf( 2.8 );\n* // returns ~0.797\n*\n* var mode = binomial.mode;\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar ctor = require( './ctor.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ctor;\n"],"names":["isPositiveInteger","require$$0","isPrimitive","isProbability","require$$1","defineProperty","require$$2","setReadOnly","require$$3","setReadOnlyAccessor","require$$4","kurtosis","require$$5","mean","require$$6","median","require$$7","mode","require$$8","skewness","require$$9","stdev","require$$10","variance","require$$11","cdf","require$$12","logpmf","require$$13","mgf","require$$14","pmf","require$$15","quantile","require$$16","format","require$$17","Binomial","n","p","this","arguments","length","TypeError","configurable","enumerable","get","set","value","prototype","x","t","lib"],"mappings":";;6uDAwBA,IAAIA,EAAoBC,EAAgDC,YACpEC,EAAgBC,EAA2CF,YAC3DG,EAAiBC,EACjBC,EAAcC,EACdC,EAAsBC,EACtBC,EAAWC,EACXC,EAAOC,EACPC,EAASC,EACTC,EAAOC,EACPC,EAAWC,EACXC,EAAQC,EACRC,EAAWC,EACXC,EAAMC,EACNC,EAASC,EACTC,EAAMC,EACNC,EAAMC,EACNC,EAAWC,EACXC,EAASC,EAkFb,SAASC,IACR,IAAIC,EACAC,EACJ,KAAOC,gBAAgBH,GACtB,OAA0B,IAArBI,UAAUC,OACP,IAAIL,EAEL,IAAIA,EAAUI,UAAW,GAAKA,UAAW,IAEjD,GAAKA,UAAUC,OAAS,CAGvB,GADAH,EAAIE,UAAW,IACTzC,EAFNsC,EAAIG,UAAW,IAGd,MAAM,IAAIE,UAAWR,EAAQ,kFAAmFG,IAEjH,IAAMnC,EAAeoC,GACpB,MAAM,IAAII,UAAWR,EAAQ,2FAA4FI,SAG1HD,EAAI,EACJC,EAAI,GA4BL,OA1BAlC,EAAgBmC,KAAM,IAAK,CAC1BI,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOR,GAERS,IAAO,SAAcC,GACpB,IAAMhD,EAAmBgD,GACxB,MAAM,IAAIL,UAAWR,EAAQ,0DAA2Da,IAEzFV,EAAIU,KAGN3C,EAAgBmC,KAAM,IAAK,CAC1BI,cAAgB,EAChBC,YAAc,EACdC,IAAO,WACN,OAAOP,GAERQ,IAAO,SAAcC,GACpB,IAAM7C,EAAe6C,GACpB,MAAM,IAAIL,UAAWR,EAAQ,gEAAiEa,IAE/FT,EAAIS,KAGCR,KAiBR/B,EAAqB4B,EAASY,UAAW,YAAY,WACpD,OAAOtC,EAAU6B,KAAKF,EAAGE,KAAKD,MAiB/B9B,EAAqB4B,EAASY,UAAW,QAAQ,WAChD,OAAOpC,EAAM2B,KAAKF,EAAGE,KAAKD,MAiB3B9B,EAAqB4B,EAASY,UAAW,UAAU,WAClD,OAAOlC,EAAQyB,KAAKF,EAAGE,KAAKD,MAiB7B9B,EAAqB4B,EAASY,UAAW,QAAQ,WAChD,OAAOhC,EAAMuB,KAAKF,EAAGE,KAAKD,MAiB3B9B,EAAqB4B,EAASY,UAAW,YAAY,WACpD,OAAO9B,EAAUqB,KAAKF,EAAGE,KAAKD,MAiB/B9B,EAAqB4B,EAASY,UAAW,SAAS,WACjD,OAAO5B,EAAOmB,KAAKF,EAAGE,KAAKD,MAiB5B9B,EAAqB4B,EAASY,UAAW,YAAY,WACpD,OAAO1B,EAAUiB,KAAKF,EAAGE,KAAKD,MAmB/BhC,EAAa8B,EAASY,UAAW,OAvQjC,SAAsBC,GACrB,OAAOzB,EAAKyB,EAAGV,KAAKF,EAAGE,KAAKD,MAwR7BhC,EAAa8B,EAASY,UAAW,UA9QjC,SAAyBC,GACxB,OAAOvB,EAAQuB,EAAGV,KAAKF,EAAGE,KAAKD,MA+RhChC,EAAa8B,EAASY,UAAW,OArRjC,SAAsBE,GACrB,OAAOtB,EAAKsB,EAAGX,KAAKF,EAAGE,KAAKD,MAsS7BhC,EAAa8B,EAASY,UAAW,OA5RjC,SAAsBC,GACrB,OAAOnB,EAAKmB,EAAGV,KAAKF,EAAGE,KAAKD,MA6S7BhC,EAAa8B,EAASY,UAAW,YAnSjC,SAA2BV,GAC1B,OAAON,EAAUM,EAAGC,KAAKF,EAAGE,KAAKD,MAuSlC,IC7VAa,ED6ViBf"}